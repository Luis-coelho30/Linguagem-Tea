Programa ::= UnidadesPreMain FuncMain UnidadesPosMain

UnidadesPreMain ::= DeclStmt UnidadesPreMain | ε

FuncMain ::= "main" "(" ")" BlocoStmt

UnidadesPosMain ::= FuncDecl UnidadesPosMain | ε

FuncDecl ::= TypeORtypeArray "id" "(" ParamList ")" BlocoStmt
ParamList ::= Param ParamListTail | ε
ParamListTail ::= "," Param ParamListTail | ε
Param ::= Type ParamSufixo
ParamSufixo ::= "id" | "id" "[" "]"
 
Stmt ::= "id" StmtIdTail ";" | DeclStmt | IfStmt | WhileStmt | ForStmt | DoStmt | SwitchStmt | ReturnStmt | BlocoStmt | BreakStmt | EmptyStmt
StmtIdTail ::= "(" ArgList ")" | LValueSufixo "=" Expr
StmtList ::= Stmt StmtList | ε

DeclStmt ::= Type "id" DeclStmtSufixo
DeclStmtSufixo ::= "[" "in" "]" ";" | DeclStmt1
DeclStmt1 ::= "=" Expr ";" | ";"

TypeORtypeArray ::= Type | TypeArray
TypeArray ::= Type "[" "]"
Type ::= "int" | "float" | "double" | "char" | "boolean" 

IfStmt ::= "if" "(" Expr ")" Stmt ElifList ElsePart
ElifList ::= elif ElifList | ε 
Elif ::= "elif" "(" Expr ")" Stmt
ElsePart ::= "else" Stmt | ε

WhileStmt ::= "while" "(" Expr ")" Stmt

ForStmt ::= "for" "(" ForInit ForCond ";" ForUpdate ")" Stmt
ForInit ::= ForAssign | DeclStmt | ";"
ForAssign ::= "id" "=" Expr ";"
ForCond ::= Expr | ε
ForUpdate ::= "id" "=" ExprArit | ε

DoStmt ::= "do" Stmt "while" "(" Expr ")" ";"

SwitchStmt ::= "switch" "(" ExprArit ")" "{" CaseList DefaultPart "}"
CaseList ::= caseClause CaseList | ε
CaseClause ::= "case" ExprArit ":" StmtList BreakStmt
BreakStmt ::= "break" ";" 
DefaultPart ::= "default" ":" StmtList | ε

ReturnStmt ::= "return" ReturnExpr ";"
ReturnExpr ::= Expr | ε 

BlocoStmt ::= "{" StmtList "}"

EmptyStmt ::= ";"

Expr -> LValue "=" Expr | ExprLog

LValue -> "id" LValueSufixo
LValueSufixo -> "[" "num" "]" | ε

ExprLog -> ExprRel ExprLog'
ExprLog' -> ("AND" | "OR") ExprRel ExprLog' | ε

ExprRel -> ExprComp ExprRel'
ExprRel' -> ("==" | "!=") ExprComp ExprRel' | ε

ExprComp -> ExprNot ExprComp'
ExprComp' -> ("<" | "<=" | ">" | ">=") ExprArit | ε

ExprNot -> "!" ExprNot | ExprArit

ExprArit -> Termo ExprArit'
ExprArit' -> ("+" | "-") Termo ExprArit' | ε

Termo -> Fator Termo'
Termo' -> ("*" | "/") Fator Termo' | ε

Fator -> "(" Expr ")" | "num" | "true" | "false" | "id" FatorSufixo

FatorSufixo -> "(" ArgList ")" | "[" "num" "]" | ε

argList -> Expr ArgListTail | ε

argListTail -> "," Expr ArgListTail | ε