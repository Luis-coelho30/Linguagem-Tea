Programa -> UnidadesPreMain FuncMain UnidadesPosMain

UnidadesPreMain -> DeclStmt UnidadesPreMain | ε

FuncMain -> "main" "(" ")" BlocoStmt

UnidadesPosMain -> FuncDecl UnidadesPosMain | ε

FuncDecl -> TypeORtypeArray "id" "(" ParamList ")" BlocoStmt
ParamList -> Param ParamListTail | ε
ParamListTail -> "," Param ParamListTail | ε
Param -> Type "id" ParamSufixo
ParamSufixo -> "[" "]" | ε
 
Stmt -> "id" StmtIdTail ";" | DeclStmt | IfStmt | WhileStmt | ForStmt | DoStmt | SwitchStmt | ReturnStmt | BlocoStmt | BreakStmt | EmptyStmt
StmtIdTail -> "(" ArgList ")" | "[" "numero" "]" "=" Expr | "=" Expr

DeclStmt -> Type "id" DeclStmtSufixo
DeclStmtSufixo -> "[" "numero" "]" ";" | DeclStmt1
DeclStmt1 -> "=" Expr ";" | ";"

TypeORtypeArray -> Type TypeSufixo
TypeSufixo -> "[" "]" | ε
Type -> "int" | "float" | "double" | "char" | "boolean" 

IfStmt -> "if" "(" Expr ")" BlocoStmt OptionalElif
OptionalElif -> "elif" "(" Expr ")" BlocoStmt OptionalElif | OptionalElse
OptionalElse -> "else" BlocoStmt | ε

WhileStmt -> "while" "(" Expr ")" Stmt

ForStmt -> "for" "(" ForInit ";" ForCond ";" ForUpdate ")" Stmt
ForInit -> Type "id" "=" Expr | "id" "=" Expr | ε
ForCond -> Expr | ε
ForUpdate -> "id" "=" ExprArit | ε

DoStmt -> "do" Stmt "while" "(" Expr ")" ";"

SwitchStmt -> "switch" "(" ExprArit ")" "{" CaseSectionList "}"
CaseSectionList -> CaseSection CaseSectionList | ε
CaseSection -> CaseLabels CaseBody
CaseLabels -> "case" ExprArit ":" CaseLabels | "default" ":"
CaseBody -> Stmt CaseBody | ε

BreakStmt -> "break" ";"

ReturnStmt -> "return" ReturnExpr ";"
ReturnExpr -> Expr | ε 

BlocoStmt -> "{" BlocoInstList "}"
BlocoInstList -> BlocoInst BlocoInstList | ε
BlocoInst -> Stmt 

EmptyStmt -> ";"

Expr -> ExprLog ExprSufixo

ExprSufixo -> "=" Expr | ε

ExprLog -> ExprRel ExprLog'
ExprLog' -> ("AND" | "OR") ExprRel ExprLog' | ε

ExprRel -> ExprComp ExprRel'
ExprRel' -> ("==" | "!=") ExprComp ExprRel' | ε

ExprComp -> ExprNot ExprComp'
ExprComp' -> ("<" | "<=" | ">" | ">=") ExprArit | ε

ExprNot -> "!" ExprNot | ExprArit

ExprArit -> Termo ExprArit'
ExprArit' -> ("+" | "-") Termo ExprArit' | ε

Termo -> Fator Termo'
Termo' -> ("*" | "/") Fator Termo' | ε

Fator -> "(" Expr ")" | "numero" | "true" | "false" | "id" FatorSufixo

FatorSufixo -> "(" ArgList ")" | "[" "numero" "]" | ε

ArgList -> Expr ArgListTail | ε

ArgListTail -> "," Expr ArgListTail | ε